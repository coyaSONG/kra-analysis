name: Test KRA API v2

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'apps/api/**'
      - '.github/workflows/test.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'apps/api/**'
      - '.github/workflows/test.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up uv (Python + cache)
      uses: astral-sh/setup-uv@v3
      with:
        python-version: '3.11'
        enable-cache: true
    
    - name: Install dependencies with uv
      working-directory: ./apps/api
      run: |
        uv sync --all-extras --dev
    
    - name: Run linting (ruff/black)
      working-directory: ./apps/api
      run: |
        # Show diff for auto-fixable issues and fail if any would be fixed
        uv run ruff check --diff --exit-non-zero-on-fix .
        # Gate on any remaining non-fixable issues
        uv run ruff check .
        uv run black --check .
    
    - name: Run type checking (mypy)
      working-directory: ./apps/api
      run: |
        uv run mypy . --ignore-missing-imports --no-strict-optional || true
    
    - name: Run unit tests
      working-directory: ./apps/api
      env:
        DATABASE_URL: postgresql+asyncpg://test:test@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/15
        SECRET_KEY: test-secret-key
        ENVIRONMENT: test
        PYTHONPATH: .
      run: |
        uv run pytest -v -m unit --tb=short -o addopts=""
    
    - name: Run integration tests
      working-directory: ./apps/api
      env:
        DATABASE_URL: postgresql+asyncpg://test:test@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/15
        SECRET_KEY: test-secret-key
        ENVIRONMENT: test
        RATE_LIMIT_ENABLED: "false"
        PYTHONPATH: .
      run: |
        uv run pytest -v -m integration --tb=short --timeout=60
      continue-on-error: true
    
    - name: Run unit tests with coverage (80% fail-under via .coveragerc)
      working-directory: ./apps/api
      env:
        DATABASE_URL: postgresql+asyncpg://test:test@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/15
        SECRET_KEY: test-secret-key
        ENVIRONMENT: test
        PYTHONPATH: .
      run: |
        # Use pytest.ini addopts and .coveragerc (fail_under = 80)
        uv run pytest -v -m unit
    
    - name: Upload coverage to Codecov (api)
      uses: codecov/codecov-action@v5
      with:
        files: ./apps/api/coverage.xml
        flags: api
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          apps/api/htmlcov/
          apps/api/coverage.xml
          apps/api/.coverage
