name: Test KRA API v2

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'apps/api/**'
      - '.github/workflows/test.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'apps/api/**'
      - '.github/workflows/test.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v5
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: Install dependencies
      working-directory: ./apps/api
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-timeout
    
    - name: Run linting
      working-directory: ./apps/api
      run: |
        # Run flake8 for code style
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=120 --statistics
    
    - name: Run type checking
      working-directory: ./apps/api
      run: |
        mypy . --ignore-missing-imports --no-strict-optional || true
    
    - name: Run unit tests
      working-directory: ./apps/api
      env:
        DATABASE_URL: postgresql+asyncpg://test:test@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/15
        SECRET_KEY: test-secret-key
        ENVIRONMENT: test
        PYTHONPATH: .
      run: |
        pytest -v -m unit --tb=short -o addopts=""
    
    - name: Run integration tests
      working-directory: ./apps/api
      env:
        DATABASE_URL: postgresql+asyncpg://test:test@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/15
        SECRET_KEY: test-secret-key
        ENVIRONMENT: test
        RATE_LIMIT_ENABLED: "false"
        PYTHONPATH: .
      run: |
        pytest -v -m integration --tb=short --timeout=60
      continue-on-error: true
    
    - name: Run all tests with coverage
      working-directory: ./apps/api
      env:
        DATABASE_URL: postgresql+asyncpg://test:test@localhost:5432/test_db
        REDIS_URL: redis://localhost:6379/15
        SECRET_KEY: test-secret-key
        ENVIRONMENT: test
        PYTHONPATH: .
      run: |
        pytest -v -m unit --cov=. --cov-report=xml --cov-report=term-missing --cov-fail-under=30
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        files: ./apps/api/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          apps/api/htmlcov/
          apps/api/coverage.xml
          apps/api/.coverage
