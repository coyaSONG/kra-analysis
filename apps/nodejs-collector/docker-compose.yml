version: '3.8'

services:
  # Redis Cache Service
  redis:
    image: redis:7-alpine
    container_name: kra-collector-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    environment:
      # Redis Configuration
      - REDIS_APPENDONLY=yes
      - REDIS_MAXMEMORY=256mb
      - REDIS_MAXMEMORY_POLICY=allkeys-lru
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    command: redis-server /etc/redis/redis.conf
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - kra-network

  # Node.js API Server
  nodejs-collector:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: kra-collector-api
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      # Server Configuration
      - NODE_ENV=production
      - PORT=3001
      - HOST=0.0.0.0
      
      # Redis Configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_URL=redis://redis:6379/0
      
      # KRA API Configuration
      - KRA_API_BASE_URL=http://data.kra.co.kr
      - KRA_API_KEY=${KRA_API_KEY:-}
      - KRA_API_TIMEOUT=30000
      - KRA_API_RETRY_ATTEMPTS=3
      
      # Security
      - CORS_ORIGINS=${CORS_ORIGINS:-*}
      - JWT_SECRET=${JWT_SECRET:-default-jwt-secret-change-in-production}
      - API_KEY=${API_KEY:-}
      
      # Logging
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - LOG_FORMAT=json
      
      # Performance
      - CACHE_DEFAULT_TTL=900
      - COMPRESSION_LEVEL=6
      
      # Rate Limiting
      - RATE_LIMIT_DEFAULT_MAX=100
      - RATE_LIMIT_WINDOW_MS=900000
      
      # Monitoring
      - HEALTH_CHECK_DETAILED=true
      - METRICS_ENABLED=true
    volumes:
      - ./cache:/app/cache
      - ./logs:/app/logs
      - ./tmp:/app/tmp
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    networks:
      - kra-network

  # Development Node.js Server (for development)
  nodejs-collector-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: kra-collector-api-dev
    restart: unless-stopped
    ports:
      - "3001:3001"
      - "9229:9229"  # Node.js debugger port
    environment:
      # Server Configuration
      - NODE_ENV=development
      - PORT=3001
      - HOST=0.0.0.0
      
      # Redis Configuration
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_URL=redis://redis:6379/0
      
      # KRA API Configuration
      - KRA_API_BASE_URL=http://data.kra.co.kr
      - KRA_API_KEY=${KRA_API_KEY:-}
      
      # Development Settings
      - DEBUG_MODE=true
      - LOG_LEVEL=debug
      - ENABLE_API_DOCS=true
      - DEBUG_REQUESTS=true
      - ENABLE_SOURCE_MAPS=true
    volumes:
      - .:/app
      - /app/node_modules
      - ./cache:/app/cache
      - ./logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
    command: npm run dev
    networks:
      - kra-network
    profiles:
      - dev

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: kra-collector-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - nodejs-collector
    networks:
      - kra-network
    profiles:
      - nginx

  # Monitoring - Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: kra-collector-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - kra-network
    profiles:
      - monitoring

  # Monitoring - Grafana (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: kra-collector-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
    depends_on:
      - prometheus
    networks:
      - kra-network
    profiles:
      - monitoring

  # Log aggregation - Loki (optional)
  loki:
    image: grafana/loki:latest
    container_name: kra-collector-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki/loki-config.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - kra-network
    profiles:
      - monitoring

  # Log shipping - Promtail (optional)
  promtail:
    image: grafana/promtail:latest
    container_name: kra-collector-promtail
    restart: unless-stopped
    volumes:
      - ./monitoring/promtail/promtail-config.yml:/etc/promtail/config.yml:ro
      - ./logs:/var/log/app:ro
      - /var/log:/var/log:ro
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - kra-network
    profiles:
      - monitoring

networks:
  kra-network:
    driver: bridge
    name: kra-collector-network

volumes:
  redis_data:
    name: kra-collector-redis-data
  prometheus_data:
    name: kra-collector-prometheus-data
  grafana_data:
    name: kra-collector-grafana-data
  loki_data:
    name: kra-collector-loki-data